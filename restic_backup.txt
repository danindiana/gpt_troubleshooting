Restic is a backup program that can create and manage backups from the command line. To create an archive of directories in 15 GB increments using Restic on Windows PowerShell, you'll need to follow these steps:

1. **Install Restic**: If you haven't already, you'll need to install Restic on your Windows machine. You can download the Windows executable from the Restic website: https://restic.net/#downloads

2. **Set Up Restic Repository**: Create a repository where the backups will be stored. This can be a local folder, a network drive, or a cloud storage service. For example, let's assume you're using a local folder `D:\ResticBackup`.

3. **Create a PowerShell Script**: Open Windows PowerShell and create a script to run Restic commands for your backup needs. You can create a `.ps1` script file using a text editor of your choice. Here's an example script that backs up the `K:\` directory in 15 GB increments:

```powershell
# Set your repository location
$repository = "D:\ResticBackup"

# Set the path of the directory you want to backup
$sourceDir = "K:\"

# Loop to create backups in 15 GB increments
$incrementSize = 15 * 1024 * 1024 * 1024  # 15 GB in bytes
$backupIndex = 1

while ($true) {
    $backupDir = Join-Path $repository ("backup" + $backupIndex.ToString("000"))
    $cmd = "restic.exe backup $sourceDir --repo=$backupDir"

    # Run the backup command
    Invoke-Expression $cmd

    # Check the size of the backup
    $backupSize = (Get-ChildItem $backupDir -Recurse | Measure-Object -Property Length -Sum).Sum

    # Check if backup size exceeds 15 GB
    if ($backupSize -ge $incrementSize) {
        $backupIndex++
    } else {
        break
    }
}
```

4. **Run the Script**: Save the PowerShell script you created and run it in PowerShell by navigating to the directory containing the script and using the following command:

```powershell
.\your-script-name.ps1
```

Replace `your-script-name.ps1` with the actual name of your script file.

Please note that Restic is a powerful tool, and this example script might need adjustments based on your specific requirements and setup. Make sure to test the script in a controlled environment before using it for actual backups to ensure that it meets your needs and works correctly.

You can run just the Restic command directly in PowerShell to back up a target directory in 15 GB increments. Here's the syntax for the Restic backup command:

```powershell
restic.exe backup SOURCE_DIR --repo=REPO_PATH
```

Replace `SOURCE_DIR` with the path of the directory you want to back up and `REPO_PATH` with the path to the Restic repository where the backups will be stored.

If you want to ensure that each backup stays within a 15 GB size limit, you'll need to create a loop that handles the incrementing of backups as shown in the previous script. Here's a simpler example of just the Restic command within a loop:

```powershell
# Set your repository location
$repository = "D:\ResticBackup"

# Set the path of the directory you want to backup
$sourceDir = "K:\"

# Loop to create backups in 15 GB increments
$incrementSize = 15 * 1024 * 1024 * 1024  # 15 GB in bytes
$backupIndex = 1

while ($true) {
    $backupDir = Join-Path $repository ("backup" + $backupIndex.ToString("000"))
    $cmd = "restic.exe backup $sourceDir --repo=$backupDir"

    # Run the backup command
    Invoke-Expression $cmd

    # Check the size of the backup
    $backupSize = (Get-ChildItem $backupDir -Recurse | Measure-Object -Property Length -Sum).Sum

    # Check if backup size exceeds 15 GB
    if ($backupSize -ge $incrementSize) {
        $backupIndex++
    } else {
        break
    }
}
```

Again, remember to adjust the paths and options according to your specific setup and requirements.


--show verbose output in the script:

# Set your repository location
$repository = "D:\ResticBackup"

# Set the path of the directory you want to backup
$sourceDir = "K:\"

# Loop to create backups in 15 GB increments
$incrementSize = 15 * 1024 * 1024 * 1024  # 15 GB in bytes
$backupIndex = 1

while ($true) {
    $backupDir = Join-Path $repository ("backup" + $backupIndex.ToString("000"))
    Write-Host "Creating backup in $backupDir"

    $cmd = "restic.exe backup $sourceDir --repo=$backupDir"
    Write-Host "Running command: $cmd"

    # Run the backup command
    Invoke-Expression $cmd

    # Check the size of the backup
    $backupSize = (


Errors on no backup dir:

It seems like the issue might be related to Restic not recognizing the repository path or not being able to properly access the specified directory for the repository. Here are a few things to check and consider:

1. **Repository Path**: Make sure that the repository path `K:\srv\restic-repo` exists and is accessible. The error message indicates that Restic is unable to find the configuration file at `K:\srv\restic-repo\backup001\config`, which could indicate that the repository path isn't correct or the necessary permissions are missing.

2. **Directory Structure**: Ensure that the specified repository directory has the correct structure for a Restic repository. If it doesn't exist, you can initialize a new Restic repository using the `init` command. In your case, you might need to run:

   ```powershell
   restic.exe init --repo="K:\srv\restic-repo"
   ```

3. **Backslashes in Paths**: Windows paths typically use backslashes (`\`) as path separators. Make sure that the paths in your script are using double backslashes (`\\`) to escape the backslash character properly. For example:

   ```powershell
   $repository = "K:\\srv\\restic-repo"
   $sourceDir = "K:\\Skull_Digger"
   ```

4. **Restic Configuration**: Ensure that the `restic.exe` binary is in the same directory as your script, or that its directory is included in the system's PATH environment variable.

5. **Permissions**: Check the permissions of the target directory and repository. Make sure that the user running the script has appropriate permissions to access and modify the specified paths.

6. **Drive Availability**: Ensure that the `K:` drive is properly connected and accessible. If it's a network drive, check if there are any network connectivity issues.

7. **Debugging**: You can try adding additional debugging output by modifying the script to display more information about the directory paths and commands being used. This can help identify any discrepancies or issues.

If you've verified all of the above and are still encountering issues, it might be beneficial to consult the Restic documentation or community forums for further assistance, as they might have specific insights into Windows-related issues.

Certainly! I've added more debugging information to the script to help you identify any potential issues. Here's the modified script:

```powershell
# Set your repository location
$repository = "K:\\srv\\restic-repo"

# Set the path of the directory you want to backup
$sourceDir = "K:\\httpsfemagov"

# Loop to create backups in 15 GB increments
$incrementSize = 15 * 1024 * 1024 * 1024  # 15 GB in bytes
$backupIndex = 1

while ($true) {
    $backupDir = Join-Path $repository ("backup" + $backupIndex.ToString("000"))
    Write-Host "Creating backup in $backupDir"

    $cmd = "restic.exe backup $sourceDir --repo=$backupDir"
    Write-Host "Running command: $cmd"

    # Run the backup command
    Write-Host "Executing backup command..."
    Invoke-Expression $cmd
    Write-Host "Backup command executed."

    # Check the size of the backup
    Write-Host "Checking backup size..."
    $backupSize = (Get-ChildItem $backupDir -Recurse | Measure-Object -Property Length -Sum).Sum
    Write-Host "Backup size: $($backupSize / 1GB) GB"

    # Check if backup size exceeds 15 GB
    if ($backupSize -ge $incrementSize) {
        Write-Host "Backup size exceeds 15 GB. Incrementing backup index."
        $backupIndex++
    } else {
        Write-Host "Backup size is within 15 GB limit."
        break
    }
}
```

This version of the script adds additional debugging lines before and after executing the backup command, as well as before checking the backup size. This should help you track the progress of the script and potentially identify where any issues might be occurring.

It seems like the issue still persists, and Restic is encountering difficulty accessing the repository path. Based on the output, it seems that Restic is having trouble with the repository configuration file.

Here are a few things you can do to troubleshoot this further:

1. **Repository Initialization**: Ensure that the repository has been initialized correctly. Run the following command to initialize the repository if it hasn't been initialized:

    ```powershell
    restic.exe init --repo="K:\srv\restic-repo"
    ```

2. **Permissions**: Double-check the permissions of the `K:\srv\restic-repo` directory. Make sure that the user running the script has the necessary permissions to access and modify this directory.

3. **Drive Availability**: Ensure that the `K:` drive is properly connected and accessible at the time of script execution.

4. **Restic Configuration**: Make sure that you have the appropriate version of Restic for your system architecture. Verify that the `restic.exe` binary is in the same directory as your script or is accessible via the PATH environment variable.

5. **Escape Backslashes**: In PowerShell, backslashes are escape characters. You might want to try using single backslashes in the paths instead of double backslashes:

    ```powershell
    $repository = "K:\srv\restic-repo"
    $sourceDir = "K:\httpsfemagov"
    ```

6. **Testing Repository**: Before running the script, manually navigate to the repository directory `K:\srv\restic-repo` and ensure that it exists and that there are no issues accessing it.

If you've tried all of these steps and are still encountering issues, it might be beneficial to seek assistance from the Restic community forums or documentation, as they might have specific insights into Windows-related issues or recent updates to the tool.

Oops. I should probably have mentioned I did already initialize a restic at: K:\srv\restic-repo and entered a password. 

Thank you for providing that information. Since you've already initialized a Restic repository at `K:\srv\restic-repo` and set a password, the issue might be related to how the script is interacting with the repository. Here's another thing to try:

1. **Run the Script as Administrator**: Sometimes, accessing certain directories or files may require elevated permissions. Right-click on your PowerShell script and choose "Run as administrator" to see if this resolves the issue.

If running the script as an administrator doesn't resolve the issue, and you've verified that the repository exists and has been initialized correctly, then the problem might be specific to your environment or Restic installation. At this point, I would recommend reaching out to the Restic community or forums for further assistance, as they might be able to provide more insights into any recent updates or known issues related to Windows usage of Restic.

You can also double-check that you have the latest version of Restic installed, as updates might have addressed any potential compatibility issues.

restic -r REPO_PATH backup SOURCE_DIR --verbose --limit-upload 15G

Please provide the syntax from this copypasta of Restic's latest manual:

./restic --help

restic is a backup program which allows saving multiple revisions of files and
directories in an encrypted repository stored on different backends.

Usage:
  restic [command]

Available Commands:
  backup        Create a new backup of files and/or directories
  cache         Operate on local cache directories
  cat           Print internal objects to stdout
  check         Check the repository for errors
  copy          Copy snapshots from one repository to another
  diff          Show differences between two snapshots
  dump          Print a backed-up file to stdout
  find          Find a file, a directory or restic IDs
  forget        Remove snapshots from the repository
  generate      Generate manual pages and auto-completion files (bash, fish, zsh, powershell)
  help          Help about any command
  init          Initialize a new repository
  key           Manage keys (passwords)
  list          List objects in the repository
  ls            List files in a snapshot
  migrate       Apply migrations
  mount         Mount the repository
  prune         Remove unneeded data from the repository
  recover       Recover data from the repository not referenced by snapshots
  repair        Repair the repository
  restore       Extract the data from a snapshot
  rewrite       Rewrite snapshots to exclude unwanted files
  self-update   Update the restic binary
  snapshots     List all snapshots
  stats         Scan the repository and show basic statistics
  tag           Modify tags on snapshots
  unlock        Remove locks other processes created
  version       Print version information

Flags:
      --cacert file                file to load root certificates from (default: use system certificates)
      --cache-dir directory        set the cache directory. (default: use system default cache directory)
      --cleanup-cache              auto remove old cache directories
      --compression mode           compression mode (only available for repository format version 2), one of (auto|off|max) (default: $RESTIC_COMPRESSION) (default auto)
  -h, --help                       help for restic
      --insecure-tls               skip TLS certificate verification when connecting to the repository (insecure)
      --json                       set output mode to JSON for commands that support it
      --key-hint key               key ID of key to try decrypting first (default: $RESTIC_KEY_HINT)
      --limit-download rate        limits downloads to a maximum rate in KiB/s. (default: unlimited)
      --limit-upload rate          limits uploads to a maximum rate in KiB/s. (default: unlimited)
      --no-cache                   do not use a local cache
      --no-lock                    do not lock the repository, this allows some operations on read-only repositories
  -o, --option key=value           set extended option (key=value, can be specified multiple times)
      --pack-size size             set target pack size in MiB, created pack files may be larger (default: $RESTIC_PACK_SIZE)
      --password-command command   shell command to obtain the repository password from (default: $RESTIC_PASSWORD_COMMAND)
  -p, --password-file file         file to read the repository password from (default: $RESTIC_PASSWORD_FILE)
  -q, --quiet                      do not output comprehensive progress report
  -r, --repo repository            repository to backup to or restore from (default: $RESTIC_REPOSITORY)
      --repository-file file       file to read the repository location from (default: $RESTIC_REPOSITORY_FILE)
      --retry-lock duration        retry to lock the repository if it is already locked, takes a value like 5m or 2h (default: no retries)
      --tls-client-cert file       path to a file containing PEM encoded TLS client certificate and private key
  -v, --verbose                    be verbose (specify multiple times or a level using --verbose=n, max level/times is 2)

Use "restic [command] --help" for more information about a command.


Certainly! Based on the Restic CLI help output you provided, here's how you can structure the command to achieve your goal of creating backups in 15 GB increments with verbose output:

```bash
./restic backup SOURCE_DIR --repo=REPO_PATH --limit-upload 15G --verbose
```

Replace `./restic` with the correct path to your Restic executable, `SOURCE_DIR` with the source directory you want to back up (e.g., `K:\Skull_Digger`), and `REPO_PATH` with the repository path where the backups will be stored (e.g., `K:\srv\restic-repo`).

Here's the full command with placeholders replaced:

```bash
./restic backup K:\Skull_Digger --repo=K:\srv\restic-repo --limit-upload 15G --verbose
```

Run this command in your command-line interface (CLI) to perform the backup operation with verbose output and the 15 GB upload limit. Make sure to adjust the paths as necessary based on your environment.

./restic backup --help

The "backup" command creates a new snapshot and saves the files and directories
given as the arguments.

EXIT STATUS
===========

Exit status is 0 if the command was successful.
Exit status is 1 if there was a fatal error (no snapshot created).
Exit status is 3 if some source data could not be read (incomplete snapshot created).

Usage:
  restic backup [flags] [FILE/DIR] ...

Flags:
  -n, --dry-run                                do not upload or write any data, just show what would be done
  -e, --exclude pattern                        exclude a pattern (can be specified multiple times)
      --exclude-caches                         excludes cache directories that are marked with a CACHEDIR.TAG file. See https://bford.info/cachedir/ for the Cache Directory Tagging Standard
      --exclude-file file                      read exclude patterns from a file (can be specified multiple times)
      --exclude-if-present filename[:header]   takes filename[:header], exclude contents of directories containing filename (except filename itself) if header of that file is as provided (can be specified multiple times)
      --exclude-larger-than size               max size of the files to be backed up (allowed suffixes: k/K, m/M, g/G, t/T)
      --files-from file                        read the files to backup from file (can be combined with file args; can be specified multiple times)
      --files-from-raw file                    read the files to backup from file (can be combined with file args; can be specified multiple times)
      --files-from-verbatim file               read the files to backup from file (can be combined with file args; can be specified multiple times)
  -f, --force                                  force re-reading the target files/directories (overrides the "parent" flag)
  -g, --group-by group                         group snapshots by host, paths and/or tags, separated by comma (disable grouping with '') (default host,paths)
  -h, --help                                   help for backup
  -H, --host hostname                          set the hostname for the snapshot manually. To prevent an expensive rescan use the "parent" flag
      --iexclude pattern                       same as --exclude pattern but ignores the casing of filenames
      --iexclude-file file                     same as --exclude-file but ignores casing of filenames in patterns
      --ignore-ctime                           ignore ctime changes when checking for modified files
      --ignore-inode                           ignore inode number changes when checking for modified files
      --no-scan                                do not run scanner to estimate size of backup
  -x, --one-file-system                        exclude other file systems, don't cross filesystem boundaries and subvolumes
      --parent snapshot                        use this parent snapshot (default: latest snapshot in the group determined by --group-by and not newer than the timestamp determined by --time)
      --read-concurrency n                     read n files concurrently (default: $RESTIC_READ_CONCURRENCY or 2)
      --stdin                                  read backup from stdin
      --stdin-filename filename                filename to use when reading from stdin (default "stdin")
      --tag tags                               add tags for the new snapshot in the format `tag[,tag,...]` (can be specified multiple times) (default [])
      --time time                              time of the backup (ex. '2012-11-01 22:08:41') (default: now)
      --use-fs-snapshot                        use filesystem snapshot where possible (currently only Windows VSS)
      --with-atime                             store the atime for all files and directories

Global Flags:
      --cacert file                file to load root certificates from (default: use system certificates)
      --cache-dir directory        set the cache directory. (default: use system default cache directory)
      --cleanup-cache              auto remove old cache directories
      --compression mode           compression mode (only available for repository format version 2), one of (auto|off|max) (default: $RESTIC_COMPRESSION) (default auto)
      --insecure-tls               skip TLS certificate verification when connecting to the repository (insecure)
      --json                       set output mode to JSON for commands that support it
      --key-hint key               key ID of key to try decrypting first (default: $RESTIC_KEY_HINT)
      --limit-download rate        limits downloads to a maximum rate in KiB/s. (default: unlimited)
      --limit-upload rate          limits uploads to a maximum rate in KiB/s. (default: unlimited)
      --no-cache                   do not use a local cache
      --no-lock                    do not lock the repository, this allows some operations on read-only repositories
  -o, --option key=value           set extended option (key=value, can be specified multiple times)
      --pack-size size             set target pack size in MiB, created pack files may be larger (default: $RESTIC_PACK_SIZE)
      --password-command command   shell command to obtain the repository password from (default: $RESTIC_PASSWORD_COMMAND)
  -p, --password-file file         file to read the repository password from (default: $RESTIC_PASSWORD_FILE)
  -q, --quiet                      do not output comprehensive progress report
  -r, --repo repository            repository to backup to or restore from (default: $RESTIC_REPOSITORY)
      --repository-file file       file to read the repository location from (default: $RESTIC_REPOSITORY_FILE)
      --retry-lock duration        retry to lock the repository if it is already locked, takes a value like 5m or 2h (default: no retries)
      --tls-client-cert file       path to a file containing PEM encoded TLS client certificate and private key
  -v, --verbose                    be verbose (specify multiple times or a level using --verbose=n, max level/times is 2)


Based on the help information you've provided for the `backup` command in Restic, here's the refactored CLI syntax for creating backups with the specified options:

```bash
./restic backup [flags] [FILE/DIR] ... --repo REPO_PATH --limit-upload 15G --verbose
```

Replace `./restic` with the actual path to your Restic executable, and `REPO_PATH` with the repository path where the backups will be stored.

For example, if you want to back up the directory `K:\Skull_Digger` to the repository `K:\srv\restic-repo` in 15 GB increments with verbose output, you can use the following command:

```bash
./restic backup K:\Skull_Digger --repo K:\srv\restic-repo --limit-upload 15G --verbose
```

Make sure to replace the paths with your actual paths and adjust any other options as needed based on your requirements.
